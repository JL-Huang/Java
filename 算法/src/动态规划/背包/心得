背包问题：
1.确定dp数组的定义及下标的含义，一维还是二维？
    dp一般是两种定义
    一种是容量为j的背包最多能装dp[j]价值的物品
    另一种是是填满j（包括j）这么大容积的包，有dp[i]种方法，i是当前遍历到是物品号
2.dp数组的递推公式？
    对于定义一：
    dp[i][j]=Math.max(dp[i-1][j]+dp[i-1][j-weight[i]]+value[i])(ij正序)
    dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]);(i正序，j完全背包正序、零一背包倒序)
    这两个递推干的事情实际是这样，dp[]是以每一个重量为下标保存对应最大价值的数组
    物品在外重量在内，遍历时就是先尝试把第一件物品放进不同重量的背包，第二件又从数组开头开始试，如果放进去后价值比原来大那就替换
    重量在外物品在内，遍历时就是尝试用一个重量的袋子把全部物品装一遍，随着循环逐渐增加或减小袋子重量

    对于定义二：
    dp[j] += dp[j - nums[i]](物品在外重量在内，i正序，j完全背包正序、零一背包倒序)
    虽然定义不一样，但两层循环的意思是一样的，都是先尝试把第一件物品放进不同重量的背包，第二件又从数组开头开始试
3.怎么初始化？
    如果要求恰好装满背包，那么在初始化时除了dp[0][0]为0，其它dp[i][0]均设为−∞，这样就可以保证最终得到的dp是一种恰好装满背包的最优解。
    如果并没有要求必须把背包装满，而是只希望价格尽量大，初始化时应该将dp[i][0]全部设为0。
    二维数组中需要初始化把0号物品装进去的背包情况
4.数组遍历顺序(包括正序倒序以及循环内外层顺序)？
    如果是二维数组无论怎样都可以，但是一维数组比较特殊
    对于一维数组的零一背包，一定是物品在外重量在内且倒序的，详细解析看零一背包test2。
    对于一维数组的完全背包，物品和重量在外在内可以反转，但一定是正序
=======================================================================================================
问能否能装满背包（或者最多装多少）：dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]); ，对应题目如下：
动态规划：416.分割等和子集
动态规划：1049.最后一块石头的重量 II

问装满背包有几种方法：dp[j] += dp[j - nums[i]] ，对应题目如下：
动态规划：494.目标和
动态规划：518. 零钱兑换 II
动态规划：377.组合总和Ⅳ
动态规划：70. 爬楼梯进阶版（完全背包）

问背包装满最大价值：dp[j] = max(dp[j], dp[j - weight[i]] + value[i]); ，对应题目如下：
动态规划：474.一和零

问装满背包所有物品的最小个数：dp[j] = min(dp[j - coins[i]] + 1, dp[j]); ，对应题目如下：
动态规划：322.零钱兑换
动态规划：279.完全平方数