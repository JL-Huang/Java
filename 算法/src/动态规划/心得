什么时候用动态规划？
不同的子问题具有共同的子子问题，硬解需要反复求解公共子子问题，动态规划则对每个公共子子问题只求解一次，并将其保存在一个表格中，避免反复求解
公共子子问题的解一般不是一个明确的值，更多是递归形式

动态规划方法通常用来求解最优化问题。这类问题可以有很多可解,每个解都有一个值，我们希望寻找具有最优值的解。
是一个最优解不是最优解,因为可能有多个解都达到最优值。

通常按如下4个步骤来设计一个动态规划算法:
1,刻画一个最优解的结构特征。
2.递归地定义最优解的值。
3.计算最优解的值,通常采用自底向上的方法
4.利用计算出来的信息构造一个最优解

动态规划原理：
适合应用动态规划方法求解的最优化问题应该具备两个要素：最优子结构和子问题重叠。
===========================
最优子结构：
用动态规划方法求解最优化问题的第一步就是刻画最优解的结构。
如果一个问题的最优解包含其子问题的最优解，我们就称此问题具有最优子结构性质。
但也因此，我们必须小心确保考察了最优解中用到的所有子问题。在发掘最优子结构性质的过程中，实际上遵循了如下的通用模式：
证明问题最优解的第一个组成部分是做一个选择，这次选择会产生一个或多个待解决的子问题。
对于一个给定问题，在其可能的第一步选择中，你假定已经知道哪种选择才会得到最优解。
你现在并不关心这种选择具体是如何得到的，只是假定已经知道了这种选择。
给定可获得最优解的选择后，你确定这次选择会产生哪些子问题，以及如何最好地刻画子问题空间。
作为构成原问题最优解的组成部分，每个子问题的解就是它本身的最优解。
===========================
重叠子问题：
适用动态规划方法求解的最优化问题应该具备的第二个性质是子问题空间必须足够“小”，即问题的递归算法会反复地求解相同的子问题，而不是一直生成新的子问题。
一般来讲，不同子问题的总数是输入规模的多项式函数为好。如果递归算法反复求解相同的子问题，我们就称最优化问题具有重叠子问题性质。


钢条切割:
r(n)=max(p(n),r(1)+r(n-1),r(2)+r(n-2),…,r(n-1)+r(1))
注意到,为了求解规模为n的原问题,我们先求解形式完全一样,但规模更小的子问题。
即当完成首次切割后,我们将两段钢条看成两个独立的钢条切割问题实例。
我们通过组合两个相关子问题的最优解,并在所有可能的两段切割方案中选取组合收益最大者,构成原问题的最优解。
我们称钢条切割问题满足最优子结构性质:问题的最优解由相关子问题的最优解组合而成,而这些子问题可以独立求解。
===========================
上述的最优子结构可以转化为更简单的r(n)=max(p(i)+r(n-1)) 1<=i<=n
然鹅这种结构求解仍不简单，因为每一次往下递归，都要把对于1<=i<=n的所有p(i)+r(n-1)计算一遍
可以明确一点，最优子结构问题一般可以用动态规划求解，引入保存机制将子结构的解保存下来
===========================
自底向上法：
一般需要恰当定义子问题“规模”的概念,使得任何子问题的求解都只依赖于“更小的”子问题的求解。
因而我们可以将子问题按规模排序,按由小至大的顺序进行求解。
当求解某个子问题时,它所依赖的那些更小的子问题都已求解完毕,结果已经保存。
每个子向题只需求解一次,当我们求解它(也是第一次遇到它)时,它的所有前提子问题都已求解完成。